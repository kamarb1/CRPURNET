def segnet(input_shape):
    # Encoder
    conv1 = tf.keras.layers.Conv2D(64, (3, 3), padding='same', activation='relu')(input_shape)
    pool1 = tf.keras.layers.MaxPooling2D(pool_size=(2, 2))(conv1)
    conv2 = tf.keras.layers.Conv2D(128, (3, 3), padding='same', activation='relu')(pool1)
    pool2 = tf.keras.layers.MaxPooling2D(pool_size=(2, 2))(conv2)
    conv3 = tf.keras.layers.Conv2D(256, (3, 3), padding='same', activation='relu')(pool2)
    pool3 = tf.keras.layers.MaxPooling2D(pool_size=(2, 2))(conv3)
    conv4 = tf.keras.layers.Conv2D(512, (3, 3), padding='same', activation='relu')(pool3)

    # Decoder
    conv5 = tf.keras.layers.Conv2D(512, (3, 3), padding='same', activation='relu')(conv4)
    up1 = tf.keras.layers.UpSampling2D(size=(2, 2))(conv5)
    conv6 = tf.keras.layers.Conv2D(256, (3, 3), padding='same', activation='relu')(up1)
    up2 = tf.keras.layers.UpSampling2D(size=(2, 2))(conv6)
    conv7 = tf.keras.layers.Conv2D(128, (3, 3), padding='same', activation='relu')(up2)
    up3 = tf.keras.layers.UpSampling2D(size=(2, 2))(conv7)
    conv8 = tf.keras.layers.Conv2D(64, (3, 3), padding='same', activation='relu')(up3)

    # Output layer
    output_layer = tf.keras.layers.Conv2D(1, (1, 1), padding='valid')(conv8)

    # Define the model
    model = tf.keras.models.Model(inputs=input_shape, outputs=output_layer)

    return model
#input_img = Input((im_height, im_width, 1), name='img')
input_img = tf.keras.Input(shape=(256, 256, 1))
model = segnet(input_img)
model.compile(optimizer=Adam(), loss="binary_crossentropy" , metrics=["accuracy",iou, dice_coef, precision, recall, f1_score, specificity])
model.summary()
