from keras.callbacks import EarlyStopping, ModelCheckpoint, ReduceLROnPlateau
from Models import CRP_URNet

callbacks = [
    EarlyStopping(patience=30, verbose=1),
    ReduceLROnPlateau(factor=0.01, patience=15, min_lr=0.00001, verbose=1),
    ModelCheckpoint('model-old-refinenet', verbose=1, save_best_only=True, save_weights_only=True)]


results = model.fit(X_train, y_train, batch_size=16, epochs=200, callbacks=callbacks, validation_data=(X_valid, y_valid))

model.save('/CRPURNet-TN3k.h5')


preds_train = model.predict(X_train, verbose=1)
preds_val = model.predict(X_test, verbose=1)
preds_test = model.predict(X_test,verbose=1)
# Threshold predictions
preds_train_t = (preds_train > 0.5).astype(np.uint8)
preds_val_t = (preds_val > 0.5).astype(np.uint8)
preds_test_t = (preds_test > 0.5).astype(np.uint8)

def plot_sample(X, y, preds, binary_preds, ix=None):
    """Function to plot the results"""
    if ix is None:
        ix = random.randint(0, len(X))

    has_mask = y[ix].max() > 0

    fig, ax = plt.subplots(1, 4, figsize=(20, 10))
    ax[0].imshow(X[ix, ..., 0], cmap='gray')
    if has_mask:
        ax[0].contour(y[ix].squeeze(), colors='k', levels=[0.5])
    ax[0].set_title('image')

    ax[1].imshow(y[ix].squeeze())
    ax[1].set_title('mask')

    ax[2].imshow(preds[ix].squeeze(), vmin=0, vmax=1)
    if has_mask:
        ax[2].contour(y[ix].squeeze(), colors='k', levels=[0.5])
    ax[2].set_title('mask Predicted')

    ax[3].imshow(binary_preds[ix].squeeze(), vmin=0, vmax=1)
    if has_mask:
        ax[3].contour(y[ix].squeeze(), colors='k', levels=[0.5])
    ax[3].set_title('mask Predicted binary');


plot_sample(X_train, y_train, preds_train, preds_train_t, ix=1)
plot_sample(X_valid, y_valid, preds_val, preds_val_t, ix=1)
plot_sample(X_test, y_test, preds_test, preds_test_t, ix=1)
